---
- name: generate ironic json file
  hosts: all
  gather_facts: false
  tasks:
    - name: Get several inventories
      redfish_facts:
        category: Systems
        command: GetNicInventory
        baseuri: "{{ bmcip }}"
        username: "{{ bmcuser }}"
        password: "{{ bmcpassword }}"
      delegate_to: localhost
      register: result

    - name: Copy Results to Output File
      copy:
        content: "{{ result | to_nice_json }}"
        dest: "{{inventory_hostname}}.nic.json"
      delegate_to: localhost

    - name: Add Master Vars and Master Line
      shell: |
        echo '[masters:vars]'>>hosts 
        echo domain={{ domain }}>>hosts
        echo cluster={{ cluster }}>>hosts
        echo ipmi_username={{ bmcuser }}>>hosts
        echo ipmi_password={{ bmcpassword }}>>hosts
        echo '[masters]' >> hosts
      delegate_to: localhost
      run_once: True
     
    - name: DNS DHCP Scope Requirements
      shell: |
        if (getent hosts api.{{ cluster }}.{{ domain }}>/dev/null 2>&1); then apistat="Success"; else apistat="Failed"; apiip=`getent hosts api.{{ cluster }}.{{ domain }}|awk {'print $1'}; fi
        if (getent hosts test.apps.{{ cluster }}.{{ domain }}>/dev/null 2>&1); then appstat="Success"; else appstat="Failed"; appip=`getent hosts test.apps.{{ cluster }}.{{ domain }}|awk {'print $1'}; fi
        if (getent hosts ns1.{{ cluster }}.{{ domain }}>/dev/null 2>&1); then nsstat="Success"; else nsstat="Failed"; ns1ip=`getent hosts api.{{ cluster }}.{{ domain }}|awk {'print $1'}; fi
        cat << EOF > dhcps
        
        
        Hostname                               MacAddress              IpAddress                  Status
        --------------------                   --------------------    --------------------       --------------------
        api.{{ cluster }}.{{ domain }}          NA                      $apiip                    $apistat
        *.apps.{{ cluster }}.{{ domain }}       NA                      $appip                    $appstat
        ns1.{{ cluster }}.{{ domain }}          NA                      $ns1ip                    $nsstat
        EOF
      delegate_to: localhost   
      run_once: True


    - name: Add Master Hosts Lines
      shell: |
        macaddress=`jq -r '.ansible_facts.redfish_facts.nic.entries[0][1][]|select(.Description=="Integrated NIC 1 Port 1 Partition 1")|.PermanentMACAddress' {{inventory_hostname}}.nic.json`
        extmacaddress=`jq -r '.ansible_facts.redfish_facts.nic.entries[0][1][]|select(.Description=="Integrated NIC 1 Port 2 Partition 1")|.PermanentMACAddress' {{inventory_hostname}}.nic.json`
        if (grep NM_CONTROLLED=no /etc/sysconfig/network-scripts/*baremetal); then dhcpserver=`grep dhcp-server-identifier /var/lib/dhclient/*baremetal.lease | uniq | sed 's/;//g'| awk {'print $3'}`; else dhcpserver=`grep SERVER_ADDRESS /var/lib/NetworkManager/*baremetal.lease|uniq|sed 's/SERVER_ADDRESS=//g'`; fi
        if (getent hosts {{ inventory_hostname }}.{{ cluster }}.{{ domain }}>/dev/null 2>&1) && (./check_dhcp -u -i baremetal -s $dhcpserver -m $extmacaddress); then dnstat="Success"; else dnstat="Failed"; fi
        cat << EOF >> hosts
        {{ inventory_hostname }} ipmi_address={{ bmcip }} mac=$macaddress disk=59
        EOF
        cat << EOF >> dhcps
        {{ inventory_hostname }}.{{ cluster }}.{{ domain }}     $extmacaddress  $dnstat
        EOF
      delegate_to: localhost
